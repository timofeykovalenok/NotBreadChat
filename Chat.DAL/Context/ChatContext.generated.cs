// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Data;
using LinqToDB.Mapping;
using System;
using System.Collections.Generic;

#pragma warning disable 1573, 1591
#nullable enable

namespace Context
{
	public partial class ChatContext : DataConnection
	{
		public ChatContext()
		{
			InitDataContext();
		}

		public ChatContext(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public ChatContext(DataOptions<ChatContext> options)
			: base(options.Options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<Contact>              Contacts               => this.GetTable<Contact>();
		public ITable<DeletedMessage>       DeletedMessages        => this.GetTable<DeletedMessage>();
		public ITable<GroupChat>            GroupChats             => this.GetTable<GroupChat>();
		public ITable<Message>              Messages               => this.GetTable<Message>();
		public ITable<MessageInGroupChat>   MessagesInGroupChats   => this.GetTable<MessageInGroupChat>();
		public ITable<MessageInPrivateChat> MessagesInPrivateChats => this.GetTable<MessageInPrivateChat>();
		public ITable<PrivateChat>          PrivateChats           => this.GetTable<PrivateChat>();
		public ITable<User>                 Users                  => this.GetTable<User>();
		public ITable<UserInChat>           UsersInChats           => this.GetTable<UserInChat>();
	}

	[Table("Contacts")]
	public class Contact
	{
		[Column("ContactUserId", IsPrimaryKey = true, PrimaryKeyOrder = 0)] public long    ContactUserId { get; set; } // bigint
		[Column("UserId"       , IsPrimaryKey = true, PrimaryKeyOrder = 1)] public long    UserId        { get; set; } // bigint
		[Column("CustomTitle"                                            )] public string? CustomTitle   { get; set; } // character varying(64)
		[Column("CustomImage"                                            )] public string? CustomImage   { get; set; } // text

		#region Associations
		/// <summary>
		/// FK_Contacts_ContactUserId_Users_Id
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(ContactUserId), OtherKey = nameof(Context.User.Id))]
		public User ContactUser { get; set; } = null!;

		/// <summary>
		/// FK_Contacts_UserId_Users_Id
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(UserId), OtherKey = nameof(Context.User.Id))]
		public User User { get; set; } = null!;
		#endregion
	}

	[Table("DeletedMessages")]
	public class DeletedMessage
	{
		[Column("MessageId", IsPrimaryKey = true, PrimaryKeyOrder = 0)] public long MessageId { get; set; } // bigint
		[Column("UserId"   , IsPrimaryKey = true, PrimaryKeyOrder = 1)] public long UserId    { get; set; } // bigint

		#region Associations
		/// <summary>
		/// FK_DeletedMessages_MessageId_Messages_Id
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(MessageId), OtherKey = nameof(Context.Message.Id))]
		public Message Message { get; set; } = null!;

		/// <summary>
		/// FK_DeletedMessages_UserId_Users_Id
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(UserId), OtherKey = nameof(Context.User.Id))]
		public User User { get; set; } = null!;
		#endregion
	}

	[Table("GroupChats")]
	public class GroupChat
	{
		[Column("Id"       , IsPrimaryKey = true , IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public long    Id        { get; set; } // bigint
		[Column("CreatorId"                                                                                   )] public long    CreatorId { get; set; } // bigint
		[Column("Title"    , CanBeNull    = false                                                             )] public string  Title     { get; set; } = null!; // character varying(64)
		[Column("Image"                                                                                       )] public string? Image     { get; set; } // text

		#region Associations
		/// <summary>
		/// FK_GroupChats_CreatorId_Users_Id
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(CreatorId), OtherKey = nameof(User.Id))]
		public User Creator { get; set; } = null!;

		/// <summary>
		/// FK_MessagesInGroupChats_ChatId_GroupChats_Id backreference
		/// </summary>
		[Association(ThisKey = nameof(Id), OtherKey = nameof(MessageInGroupChat.ChatId))]
		public IEnumerable<MessageInGroupChat> ChatMessagesInGroupChats { get; set; } = null!;

		/// <summary>
		/// FK_UsersInChats_ChatId_GroupChats_Id backreference
		/// </summary>
		[Association(ThisKey = nameof(Id), OtherKey = nameof(UserInChat.ChatId))]
		public IEnumerable<UserInChat> ChatUsersInChats { get; set; } = null!;
		#endregion
	}

	[Table("Messages")]
	public class Message
	{
		[Column("Id"      , IsPrimaryKey = true , IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public long      Id       { get; set; } // bigint
		[Column("AuthorId"                                                                                   )] public long      AuthorId { get; set; } // bigint
		[Column("Content" , CanBeNull    = false                                                             )] public string    Content  { get; set; } = null!; // text
		[Column("CreateAt"                                                                                   )] public DateTime  CreateAt { get; set; } // timestamp (6) without time zone
		[Column("ModifyAt"                                                                                   )] public DateTime? ModifyAt { get; set; } // timestamp (6) without time zone

		#region Associations
		/// <summary>
		/// FK_DeletedMessages_MessageId_Messages_Id backreference
		/// </summary>
		[Association(ThisKey = nameof(Id), OtherKey = nameof(DeletedMessage.MessageId))]
		public IEnumerable<DeletedMessage> MessageDeletedMessages { get; set; } = null!;

		/// <summary>
		/// FK_Messages_AuthorId_Users_Id
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(AuthorId), OtherKey = nameof(User.Id))]
		public User Author { get; set; } = null!;

		/// <summary>
		/// FK_MessagesInGroupChats_MessageId_Messages_Id backreference
		/// </summary>
		[Association(ThisKey = nameof(Id), OtherKey = nameof(MessageInGroupChat.MessageId))]
		public MessageInGroupChat? Message1 { get; set; }

		/// <summary>
		/// FK_MessagesInPrivateChats_MessageId_Messages_Id backreference
		/// </summary>
		[Association(ThisKey = nameof(Id), OtherKey = nameof(MessageInPrivateChat.MessageId))]
		public MessageInPrivateChat? Message2 { get; set; }
		#endregion
	}

	[Table("MessagesInGroupChats")]
	public class MessageInGroupChat
	{
		[Column("MessageId", IsPrimaryKey = true)] public long MessageId { get; set; } // bigint
		[Column("ChatId"                        )] public long ChatId    { get; set; } // bigint

		#region Associations
		/// <summary>
		/// FK_MessagesInGroupChats_ChatId_GroupChats_Id
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(ChatId), OtherKey = nameof(GroupChat.Id))]
		public GroupChat Chat { get; set; } = null!;

		/// <summary>
		/// FK_MessagesInGroupChats_MessageId_Messages_Id
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(MessageId), OtherKey = nameof(Context.Message.Id))]
		public Message Message { get; set; } = null!;
		#endregion
	}

	[Table("MessagesInPrivateChats")]
	public class MessageInPrivateChat
	{
		[Column("MessageId"     , IsPrimaryKey = true)] public long MessageId      { get; set; } // bigint
		[Column("ReceiverUserId"                     )] public long ReceiverUserId { get; set; } // bigint

		#region Associations
		/// <summary>
		/// FK_MessagesInPrivateChats_MessageId_Messages_Id
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(MessageId), OtherKey = nameof(Context.Message.Id))]
		public Message Message { get; set; } = null!;

		/// <summary>
		/// FK_MessagesInPrivateChats_ReceiverUserId_Users_Id
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(ReceiverUserId), OtherKey = nameof(User.Id))]
		public User ReceiverUser { get; set; } = null!;
		#endregion
	}

	[Table("PrivateChats")]
	public class PrivateChat
	{
		[Column("OwnerId"                  , IsPrimaryKey = true, PrimaryKeyOrder = 0)] public long      OwnerId                   { get; set; } // bigint
		[Column("OtherUserId"              , IsPrimaryKey = true, PrimaryKeyOrder = 1)] public long      OtherUserId               { get; set; } // bigint
		[Column("LastViewedMessageCreateAt"                                          )] public DateTime? LastViewedMessageCreateAt { get; set; } // timestamp (6) without time zone

		#region Associations
		/// <summary>
		/// FK_PrivateChats_OtherUserId_Users_Id
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(OtherUserId), OtherKey = nameof(User.Id))]
		public User OtherUser { get; set; } = null!;

		/// <summary>
		/// FK_PrivateChats_OwnerId_Users_Id
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(OwnerId), OtherKey = nameof(User.Id))]
		public User Owner { get; set; } = null!;
		#endregion
	}

	[Table("Users")]
	public class User
	{
		[Column("Id"          , IsPrimaryKey = true , IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public long    Id           { get; set; } // bigint
		[Column("Login"       , CanBeNull    = false                                                             )] public string  Login        { get; set; } = null!; // character varying(64)
		[Column("Name"        , CanBeNull    = false                                                             )] public string  Name         { get; set; } = null!; // character varying(64)
		[Column("Image"                                                                                          )] public string? Image        { get; set; } // text
		[Column("PasswordHash", CanBeNull    = false                                                             )] public string  PasswordHash { get; set; } = null!; // text
		[Column("PasswordSalt", CanBeNull    = false                                                             )] public string  PasswordSalt { get; set; } = null!; // text

		#region Associations
		/// <summary>
		/// FK_Contacts_ContactUserId_Users_Id backreference
		/// </summary>
		[Association(ThisKey = nameof(Id), OtherKey = nameof(Contact.ContactUserId))]
		public IEnumerable<Contact> ContactUserContacts { get; set; } = null!;

		/// <summary>
		/// FK_Contacts_UserId_Users_Id backreference
		/// </summary>
		[Association(ThisKey = nameof(Id), OtherKey = nameof(Contact.UserId))]
		public IEnumerable<Contact> UserContacts { get; set; } = null!;

		/// <summary>
		/// FK_DeletedMessages_UserId_Users_Id backreference
		/// </summary>
		[Association(ThisKey = nameof(Id), OtherKey = nameof(DeletedMessage.UserId))]
		public IEnumerable<DeletedMessage> UserDeletedMessages { get; set; } = null!;

		/// <summary>
		/// FK_GroupChats_CreatorId_Users_Id backreference
		/// </summary>
		[Association(ThisKey = nameof(Id), OtherKey = nameof(GroupChat.CreatorId))]
		public IEnumerable<GroupChat> CreatorGroupChats { get; set; } = null!;

		/// <summary>
		/// FK_Messages_AuthorId_Users_Id backreference
		/// </summary>
		[Association(ThisKey = nameof(Id), OtherKey = nameof(Message.AuthorId))]
		public IEnumerable<Message> AuthorMessages { get; set; } = null!;

		/// <summary>
		/// FK_MessagesInPrivateChats_ReceiverUserId_Users_Id backreference
		/// </summary>
		[Association(ThisKey = nameof(Id), OtherKey = nameof(MessageInPrivateChat.ReceiverUserId))]
		public IEnumerable<MessageInPrivateChat> ReceiverUserMessagesInPrivateChats { get; set; } = null!;

		/// <summary>
		/// FK_PrivateChats_OtherUserId_Users_Id backreference
		/// </summary>
		[Association(ThisKey = nameof(Id), OtherKey = nameof(PrivateChat.OtherUserId))]
		public IEnumerable<PrivateChat> OtherUserPrivateChats { get; set; } = null!;

		/// <summary>
		/// FK_PrivateChats_OwnerId_Users_Id backreference
		/// </summary>
		[Association(ThisKey = nameof(Id), OtherKey = nameof(PrivateChat.OwnerId))]
		public IEnumerable<PrivateChat> OwnerPrivateChats { get; set; } = null!;

		/// <summary>
		/// FK_UsersInChats_UserId_Users_Id backreference
		/// </summary>
		[Association(ThisKey = nameof(Id), OtherKey = nameof(UserInChat.UserId))]
		public IEnumerable<UserInChat> UserUsersInChats { get; set; } = null!;
		#endregion
	}

	[Table("UsersInChats")]
	public class UserInChat
	{
		[Column("ChatId"                   , IsPrimaryKey = true, PrimaryKeyOrder = 0)] public long      ChatId                    { get; set; } // bigint
		[Column("UserId"                   , IsPrimaryKey = true, PrimaryKeyOrder = 1)] public long      UserId                    { get; set; } // bigint
		[Column("CustomTitle"                                                        )] public string?   CustomTitle               { get; set; } // character varying(64)
		[Column("CustomImage"                                                        )] public string?   CustomImage               { get; set; } // text
		[Column("LastViewedMessageCreateAt"                                          )] public DateTime? LastViewedMessageCreateAt { get; set; } // timestamp (6) without time zone

		#region Associations
		/// <summary>
		/// FK_UsersInChats_ChatId_GroupChats_Id
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(ChatId), OtherKey = nameof(GroupChat.Id))]
		public GroupChat Chat { get; set; } = null!;

		/// <summary>
		/// FK_UsersInChats_UserId_Users_Id
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(UserId), OtherKey = nameof(Context.User.Id))]
		public User User { get; set; } = null!;
		#endregion
	}
}
